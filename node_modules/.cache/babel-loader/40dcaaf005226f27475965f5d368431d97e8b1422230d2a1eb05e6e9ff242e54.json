{"ast":null,"code":"var _jsxFileName = \"/Users/CamRay/Desktop/Programming/41.7/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board(_ref) {\n  _s();\n  let {\n    nrows = 5,\n    ncols = 5,\n    chanceLightStartsOn = 0.25\n  } = _ref;\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n      for (let x = 0; x < ncols; x++) {\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n      initialBoard.push(row);\n    }\n    while (hasWon(initialBoard)) {\n      const numOfMoves = Math.floor(Math.random() * max - min) + min;\n      for (var i = 0; i < numOfMoves; i++) {\n        flipCells(getRandCoords(), initialBoard);\n      }\n    }\n    return initialBoard;\n  }\n  function hasWon() {\n    // check the board in state to determine whether the player has won.\n    return board.every(row => row.every(cell => !cell));\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // Make a (deep) copy of the oldBoard\n      let boardCopy = oldBoard.map(row => [...row]);\n\n      // in the copy, flip this cell and the cells around it\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n\n      // return the copy\n      return boardCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  if (hasWon()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board-title\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"neon-orange\",\n        children: \"You\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"neon-blue\",\n        children: \"Win!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this);\n  }\n  function newGame() {\n    let newGameBoard = createBoard();\n    setBoard(n => n = newGameBoard);\n  }\n\n  // make table board\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"Board\",\n    children: [/*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: board.map((row, y) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row.map((isLit, x) => /*#__PURE__*/_jsxDEV(Cell, {\n          isLit: isLit,\n          flipCellsAroundMe: () => flipCellsAround(`${y}-${x}`)\n        }, `${y}-${x}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 15\n        }, this))\n      }, y, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"Board-NewGame\",\n      type: \"button\",\n      name: \"button\",\n      onClick: newGame,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","Board","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","initialBoard","y","row","x","push","Math","random","hasWon","numOfMoves","floor","max","min","i","flipCells","getRandCoords","every","cell","flipCellsAround","coord","oldBoard","split","map","Number","flipCell","boardCopy","newGame","newGameBoard","n","isLit"],"sources":["/Users/CamRay/Desktop/Programming/41.7/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows = 5, ncols = 5, chanceLightStartsOn = 0.25 }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n      for (let x = 0; x < ncols; x++) {\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n      initialBoard.push(row);\n    }\n    while (hasWon(initialBoard)) {\n      const numOfMoves = Math.floor(Math.random() * max - min) + min;\n      for (var i = 0; i < numOfMoves; i++) {\n        flipCells(getRandCoords(), initialBoard);\n      }\n    }\n    return initialBoard;\n  }\n\n  function hasWon() {\n\n    // check the board in state to determine whether the player has won.\n    return board.every(row => row.every(cell => !cell));\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // Make a (deep) copy of the oldBoard\n      let boardCopy = oldBoard.map(row => [...row]);\n\n      // in the copy, flip this cell and the cells around it\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n\n      // return the copy\n      return boardCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n if (hasWon()) {\n    return (\n      <div className=\"Board-title\">\n        <div className=\"neon-orange\">You</div>\n        <div className=\"neon-blue\">Win!</div>\n      </div>\n    );\n  }\n\n  function newGame() {\n    let newGameBoard = createBoard();\n    setBoard((n) => (n = newGameBoard));\n  }\n\n  // make table board\n  return (\n    <table className=\"Board\">\n      <tbody>\n        {board.map((row, y) => (\n          <tr key={y}>\n            {row.map((isLit, x) => (\n              <Cell\n                key={`${y}-${x}`}\n                isLit={isLit}\n                flipCellsAroundMe={() => flipCellsAround(`${y}-${x}`)}\n              />\n            ))}\n          </tr>\n        ))}\n      </tbody>\n      <button\n        className=\"Board-NewGame\"\n        type=\"button\"\n        name=\"button\"\n        onClick={newGame}\n      >\n        New Game\n      </button>\n    </table>\n  );\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}