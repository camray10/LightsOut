{"ast":null,"code":"var _jsxFileName = \"/Users/CamRay/Desktop/Programming/41.7/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board(_ref) {\n  _s();\n  let {\n    nrows = 5,\n    ncols = 5,\n    chanceLightStartsOn = 0.25,\n    min = 6,\n    max = 15\n  } = _ref;\n  const [board, setBoard] = useState(createBoard());\n  function flipCells(coords, boardCopy) {\n    for (var i = 0; i < coords.length; i++) {\n      const [y, x] = coords[i];\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        boardCopy[y][x] = !boardCopy[y][x];\n      }\n    }\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n      for (let x = 0; x < ncols; x++) {\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n      initialBoard.push(row);\n    }\n    while (hasWon(initialBoard)) {\n      const numOfMoves = Math.floor(Math.random() * max - min) + min;\n      for (var i = 0; i < numOfMoves; i++) {\n        flipCells(getRandCoords(), initialBoard);\n      }\n    }\n    return initialBoard;\n  }\n  function getRandCoords() {\n    const y = Math.floor(Math.random() * nrows);\n    const x = Math.floor(Math.random() * ncols);\n    return [[y, x], [y + 1, x], [y - 1, x], [y, x + 1], [y, x - 1]];\n  }\n  function hasWon() {\n    // check the board in state to determine whether the player has won.\n    return board.every(row => row.every(cell => !cell));\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // Make a (deep) copy of the oldBoard\n      let boardCopy = oldBoard.map(row => [...row]);\n\n      // in the copy, flip this cell and the cells around it\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n\n      // return the copy\n      return boardCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  if (hasWon()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board-title\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"neon-orange\",\n        children: \"You\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"neon-blue\",\n        children: \"Win!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this);\n  }\n  function newGame() {\n    let newGameBoard = createBoard();\n    setBoard(n => n = newGameBoard);\n  }\n\n  // make table board\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"Board\",\n    children: [/*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: board.map((row, y) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row.map((isLit, x) => /*#__PURE__*/_jsxDEV(Cell, {\n          isLit: isLit,\n          flipCellsAroundMe: () => flipCellsAround(`${y}-${x}`)\n        }, `${y}-${x}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }, this))\n      }, y, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"Board-NewGame\",\n      type: \"button\",\n      name: \"button\",\n      onClick: newGame,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","Board","nrows","ncols","chanceLightStartsOn","min","max","board","setBoard","createBoard","flipCells","coords","boardCopy","i","length","y","x","initialBoard","row","push","Math","random","hasWon","numOfMoves","floor","getRandCoords","every","cell","flipCellsAround","coord","oldBoard","split","map","Number","flipCell","newGame","newGameBoard","n","isLit"],"sources":["/Users/CamRay/Desktop/Programming/41.7/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows = 5, ncols = 5, chanceLightStartsOn = 0.25, min = 6, max = 15 }) {\n  const [board, setBoard] = useState(createBoard());\n\n\n  function flipCells(coords, boardCopy) {\n    for (var i = 0; i < coords.length; i++) {\n      const [y, x] = coords[i];\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        boardCopy[y][x] = !boardCopy[y][x];\n      }\n    }\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n      for (let x = 0; x < ncols; x++) {\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n      initialBoard.push(row);\n    }\n    while (hasWon(initialBoard)) {\n      const numOfMoves = Math.floor(Math.random() * max - min) + min;\n      for (var i = 0; i < numOfMoves; i++) {\n        flipCells(getRandCoords(), initialBoard);\n      }\n    }\n    return initialBoard;\n  }\n\n  function getRandCoords() {\n    const y = Math.floor(Math.random() * nrows);\n    const x = Math.floor(Math.random() * ncols);\n    return [\n      [y, x],\n      [y + 1, x],\n      [y - 1, x],\n      [y, x + 1],\n      [y, x - 1],\n    ];\n  }\n\n  function hasWon() {\n\n    // check the board in state to determine whether the player has won.\n    return board.every(row => row.every(cell => !cell));\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // Make a (deep) copy of the oldBoard\n      let boardCopy = oldBoard.map(row => [...row]);\n\n      // in the copy, flip this cell and the cells around it\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n\n      // return the copy\n      return boardCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n if (hasWon()) {\n    return (\n      <div className=\"Board-title\">\n        <div className=\"neon-orange\">You</div>\n        <div className=\"neon-blue\">Win!</div>\n      </div>\n    );\n  }\n\n  function newGame() {\n    let newGameBoard = createBoard();\n    setBoard((n) => (n = newGameBoard));\n  }\n\n  // make table board\n  return (\n    <table className=\"Board\">\n      <tbody>\n        {board.map((row, y) => (\n          <tr key={y}>\n            {row.map((isLit, x) => (\n              <Cell\n                key={`${y}-${x}`}\n                isLit={isLit}\n                flipCellsAroundMe={() => flipCellsAround(`${y}-${x}`)}\n              />\n            ))}\n          </tr>\n        ))}\n      </tbody>\n      <button\n        className=\"Board-NewGame\"\n        type=\"button\"\n        name=\"button\"\n        onClick={newGame}\n      >\n        New Game\n      </button>\n    </table>\n  );\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}